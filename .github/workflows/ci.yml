name: CI

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

env:
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1

jobs:
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: sfackler/actions/rustup@master
      - uses: sfackler/actions/rustfmt@master

  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: sfackler/actions/rustup@master
      - run: echo "::set-output name=version::$(rustc --version)"
        id: rust-version
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/registry/index
          key: index-${{ runner.os }}-${{ github.run_number }}
          restore-keys: |
            index-${{ runner.os }}-
      - run: cargo generate-lockfile
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/registry/cache
          key: registry-${{ runner.os }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - run: cargo fetch
      - uses: actions/cache@v1
        with:
          path: target
          key: target-${{ github.job }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - run: cargo clippy --all --all-targets

  min-version:
    name: min-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: sfackler/actions/rustup@master
        with:
          version: 1.46.0
      - run: echo "::set-output name=version::$(rustc --version)"
        id: rust-version
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/registry/index
          key: index-${{ runner.os }}-${{ github.run_number }}
          restore-keys: |
            index-${{ runner.os }}-
      - run: cargo generate-lockfile
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/registry/cache
          key: registry-${{ runner.os }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - run: cargo fetch
      - uses: actions/cache@v1
        with:
          path: target
          key: target-${{ github.job }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - run: cargo check -p openssl

  windows-vcpkg:
    name: windows-vcpkg
    runs-on: windows-latest
    env:
      VCPKGRS_DYNAMIC: 1
      CARGO_LOG: cargo::core::compiler::fingerprint=trace
    steps:
      - uses: actions/checkout@v2
      - uses: sfackler/actions/rustup@master
      - run: echo "::set-output name=version::$(rustc --version)"
        id: rust-version
      - run: echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
      - run: vcpkg install openssl:x64-windows
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/registry/index
          key: index-${{ runner.os }}-${{ github.run_number }}
          restore-keys: |
            index-${{ runner.os }}-
      - run: cargo generate-lockfile
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/registry/cache
          key: registry-${{ runner.os }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - run: cargo fetch
      - uses: actions/cache@v1
        with:
          path: target
          key: target-${{ github.job }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - run: cargo run -p systest
      - run: cargo test -p openssl
      - run: cargo test -p openssl-errors

  macos-homebrew:
    name: macos-homebrew
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: sfackler/actions/rustup@master
      - run: echo "::set-output name=version::$(rustc --version)"
        id: rust-version
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/registry/index
          key: index-${{ runner.os }}-${{ github.run_number }}
          restore-keys: |
            index-${{ runner.os }}-
      - run: cargo generate-lockfile
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/registry/cache
          key: registry-${{ runner.os }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - run: cargo fetch
      - uses: actions/cache@v1
        with:
          path: target
          key: target-${{ github.job }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - run: cargo run -p systest
      - run: cargo test -p openssl
      - run: cargo test -p openssl-errors

  linux:
      strategy:
        fail-fast: false
        matrix:
          target:
            - x86_64-unknown-linux-gnu
            - i686-unknown-linux-gnu
            - arm-unknown-linux-gnueabihf
          library:
            - name: openssl
              version: vendored
            - name: openssl
              version: 3.0.0
              dl-path: /
            - name: openssl
              version: 1.1.1l
              dl-path: /
            - name: openssl
              version: 1.1.0l
              dl-path: /old/1.1.0
            - name: openssl
              version: 1.0.2u
              dl-path: /old/1.0.2
            - name: openssl
              version: 1.0.1u
              dl-path: /old/1.0.1
          include:
            - target: x86_64-unknown-linux-gnu
              library:
                name: libressl
                version: 2.5.5
            - target: x86_64-unknown-linux-gnu
              library:
                name: libressl
                version: 3.4.0
      name: ${{ matrix.target }}-${{ matrix.library.name }}-${{ matrix.library.version }}
      runs-on: ubuntu-latest
      env:
        OPENSSL_DIR: /opt/openssl
        CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
        CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_AR: arm-linux-gnueabihf-ar
        CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_RUNNER: qemu-arm -L /usr/arm-linux-gnueabihf
      steps:
        - uses: actions/checkout@v2
        - uses: sfackler/actions/rustup@master
        - run: echo "::set-output name=version::$(rustc --version)"
          id: rust-version
        - run: rustup target add ${{ matrix.target }}
        - name: Install packages
          run: |
            case "${{ matrix.target }}" in
            "x86_64-unknown-linux-gnu")
              exit 0
              ;;
            "i686-unknown-linux-gnu")
              packages="gcc-multilib"
              ;;
            "arm-unknown-linux-gnueabihf")
              packages="gcc-arm-linux-gnueabihf qemu-user"
              ;;
            esac

            sudo apt-get update
            sudo apt-get install -y $packages
        - uses: actions/cache@v2
          with:
            path: /opt/openssl
            key: openssl-${{ matrix.target }}-${{ matrix.library.name }}-${{ matrix.library.version }}-2
          if: matrix.library.version != 'vendored'
          id: openssl-cache
        - name: Build OpenSSL
          run: |
            case "${{ matrix.library.name }}" in
            "openssl")
              url="https://openssl.org/source${{ matrix.library.dl-path }}/openssl-${{ matrix.library.version }}.tar.gz"
              ;;
            "libressl")
              url="https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-${{ matrix.library.version }}.tar.gz"
              ;;
            esac

            case "${{ matrix.target}}" in
            "x86_64-unknown-linux-gnu")
              OS_COMPILER=linux-x86_64
              OS_FLAGS=""
              ;;
            "i686-unknown-linux-gnu")
              OS_COMPILER=linux-elf
              OS_FLAGS=-m32
              ;;
            "arm-unknown-linux-gnueabihf")
              OS_COMPILER=linux-armv4
              OS_FLAGS=""
              export AR=arm-linux-gnueabihf-ar
              export CC=arm-linux-gnueabihf-gcc
              ;;
            esac

            mkdir /tmp/build
            cd /tmp/build

            curl -L $url | tar --strip-components=1 -xzf -

            case "${{ matrix.library.name }}" in
            "openssl")
              ./Configure --prefix=$OPENSSL_DIR --libdir=lib $OS_COMPILER -fPIC -g $OS_FLAGS no-shared
              ;;
            "libressl")
              ./configure --prefix=$OPENSSL_DIR --disable-shared --with-pic
              ;;
            esac

            make
            make install_sw
          if: matrix.library.version != 'vendored' && !steps.openssl-cache.outputs.cache-hit
        - run: echo "RUST_TEST_THREADS=1" >> $GITHUB_ENV
          if: matrix.target == 'arm-unknown-linux-gnueabihf'
        - uses: actions/cache@v1
          with:
            path: ~/.cargo/registry/index
            key: index-${{ runner.os }}-${{ github.run_number }}
            restore-keys: |
              index-${{ runner.os }}-
        - run: cargo generate-lockfile
        - uses: actions/cache@v1
          with:
            path: ~/.cargo/registry/cache
            key: registry-${{ runner.os }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
        - run: cargo fetch
        - uses: actions/cache@v1
          with:
            path: target
            key: target-${{ matrix.target }}-${{ matrix.library.name }}-${{ matrix.library.version }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
        - name: Run systest
          run: |
            if [[ "${{ matrix.library.version }}" == "vendored" ]]; then
              features="--features vendored"
            fi
            cargo run --manifest-path=systest/Cargo.toml --target ${{ matrix.target }} $features
        - name: Test openssl
          run: |
            if [[ "${{ matrix.library.version }}" == "vendored" ]]; then
              features="--features vendored"
            fi
            cargo test --manifest-path=openssl/Cargo.toml --target ${{ matrix.target }} $features
        - name: Test openssl-errors
          run: |
            if [[ "${{ matrix.library.version }}" == "vendored" ]]; then
              features="--features openssl-sys/vendored"
            fi
            cargo test --manifest-path=openssl-errors/Cargo.toml --target ${{ matrix.target }} $features
